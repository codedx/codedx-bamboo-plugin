/*
 * Code Dx API
 * Code Dx provides a variety of REST APIs, allowing external applications and scripts to interface with core functionality. This guide documents the various REST resources provided by Code Dx.  ## Authentication  Authentication is a requirement when accessing API endpoints. There are two methods by which authentication may be performed.  ### API Keys  The primary method for authentication is passing an `API-Key` header containing a valid API key with all requests.  For example&#58;  `API-Key: 550e8400-e29b-41d4-a716-44665544000`  API keys may be generated by Code Dx admins. Once they are generated, in most cases, they behave like regular users. They will need to be assigned user roles for any projects they will be used with. Although it is possible to assign the *admin* [role](UserGuide.html#UserRolesConfiguration) to an API key, the recommendation is to avoid doing so unless absolutely necessary.  See the user guide for an overview about how to create and manage [API keys](UserGuide.html#APIKeysAdministration).  ### HTTP Basic Authentication  HTTP Basic authentication may be used to authenticate with the API as a regular user. This is accomplished by including an `Authorization` header containing a typical authorization credential.  ## Error Handling  ### Bad Requests  For API calls that accept input, invalid values will trigger an HTTP 400 Bad Request status code.  ### Server Errors  For any API call, if an unexpected error occurs, an HTTP 500 Internal Server Error status code will be returned. If an error message is available, the response will include a basic message body describing the error&#58;  ` {   \"error\": \"error message\" } `  The error property will contain a string message indicating the nature of the error.  ### Errors with Third-Party Applications  Sometimes Code Dx must communicate with third-party applications like JIRA, Git, and certain enterprise tools. Some users may have in-house versions of these with self-signed certificates which may not be \"trusted\". In these cases, the API will respond with an HTTP 502 BAD GATEWAY status. If this happens, refer to [Trusting Self-Signed Certificates](InstallGuide.html#TrustingSelfSignedCertificates) in the install guide.  ### API Unavailable  In special circumstances, particularly during the installation and update phases, the API will be unavailable. When the API is unavailable, all calls will return an HTTP 503 Service Unavailable status, and no actions or side effects will occur as a result of the calls.  ## Examples  Code Dx's API uses REST over HTTP. As such, you can use any language/utility that supports making HTTP requests to interact with the API. The examples below use <a href=\"https://curl.haxx.se/\" target=\"_blank\">curl</a>, a popular command-line utility, to do so.  First, you'll need to [generate an API Key](UserGuide.html#APIKeysAdministration). Second, while you can create projects through the API, these examples will assume that you've already created one. You'll need to know its project id number, which you can find by looking at the URL for the [Findings Page](UserGuide.html#Findings), which will end in a number.  **Note:** Many API endpoints require a JSON body in the request. Most JSON will contain double-quotes (`\"`) and spaces, which have special meaning when used on the command line. In order to ensure your JSON body is interpreted as a single argument, you must <a href=\"https://en.wikipedia.org/wiki/Escape_character\" target=\"_blank\">escape</a> it properly. For example, if you wanted to `POST` the following JSON body&#58;  ``` { \"name\": \"John Doe\" } ```  You would put a backslash (`\\`) before each double-quote (`\"`), and surround the whole thing with double-quotes&#58;  ``` \"{ \\\"name\\\": \\\"John Doe\\\" }\" ```  The outermost double-quotes tell the command-line interpreter that everything within them is to be treated as a single argument (as opposed to the usual space-separated behavior). The backslash before each inner double-quote tells the command-line interpreter that you mean the literal double-quote character, and not the end of the quoted argument.  In many *non-Windows* operating systems, you can also use a single-quote (`'`) to surround the argument, and skip the backslashes&#58;  ``` '{ \"name\": \"John Doe\" }' ```  The examples below will use the double-quotes and backslashes style, as it works on most (if not all) operating systems.  ### Running an Analysis  To start an analysis, you can run  ``` curl -F file1=@src.zip -H \"API-Key: 942d16d4-fb3f-4653-9cb3-a9da2e28e574\" https://<yourcodedxserver>/codedx/api/projects/<project id>/analysis ```  Make sure you use your own values for the `src.zip` file, the API Key, the hostname for your Code Dx server, and the project id.  **Note:** This endpoint is not listed below due to a swagger limitation.  ### Retrieving Finding Data  There is a wide variety of data available for the findings of a project after running an analysis. Two examples are provided here.  ### Findings Table Data  You can retrieve the data that's used to populate the [findings table](UserGuide.html#FindingsTable)&#58;  ``` curl -H \"Content-Type: application/json\" -X POST -d \"{\\\"filter\\\":{},\\\"sort\\\":{\\\"by\\\":\\\"id\\\",\\\"direction\\\":\\\"ascending\\\"},\\\"pagination\\\":{\\\"page\\\":1,\\\"perPage\\\":10}}\" -H \"API-Key: 942d16d4-fb3f-4653-9cb3-a9da2e28e574\" https://<yourcodedxserver>/codedx/api/projects/<project id>/findings/table ```  Additional information about how to construct more useful filter and sort requests can be found in the documentation.  ### Finding Metadata  You can retrieve metadata for a finding, if you know the finding id. You can take the ID for a finding from the Findings Table&#58;  ``` curl -H \"API-Key: 942d16d4-fb3f-4653-9cb3-a9da2e28e574\" https://<yourcodedxserver>/codedx/api/findings/<finding id> ```  ### Generating a Report  You can use the API to generate a PDF [report](UserGuide.html#GenerateReport).  ``` curl -H \"Content-Type: application/json\" -X POST -d \"{\\\"filter\\\":{},\\\"config\\\":{\\\"summaryMode\\\":\\\"simple\\\",\\\"detailsMode\\\":\\\"simple\\\",\\\"includeResultDetails\\\":true,\\\"includeComments\\\":false}}\" -H \"API-Key: 942d16d4-fb3f-4653-9cb3-a9da2e28e574\" https://<yourcodedxserver>/codedx/api/projects/<project id>/report/pdf ```  ## Generating a Client SDK  If you require a client SDK for Code Dx, you can generate one using [Swagger Code Generator](https://github.com/swagger-api/swagger-codegen). Detailed instructions are available on the github page and our swagger spec can be found [here](swagger/swagger.json). 
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.codedx.client.api;

import com.codedx.client.ApiException;
import com.codedx.client.api.Analysis;
import com.codedx.client.api.AnalysisDetails;
import com.codedx.client.api.AnalysisName;
import com.codedx.client.api.AnalysisPrepResponse;
import com.codedx.client.api.AnalysisQueryResponse;
import com.codedx.client.api.Enabled;
import java.io.File;
import com.codedx.client.api.FileUploadResponse;
import com.codedx.client.api.InputDisplayInfo;
import com.codedx.client.api.ProjectId;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AnalysisApi
 */
@Ignore
public class AnalysisApiTest {

    private final AnalysisApi api = new AnalysisApi();

    
    /**
     * Create Analysis Prep
     *
     * Create a new Analysis Prep associated with a particular project. If Git is configured on that project, the new Analysis Prep will automatically initialize an input corresponding to that configuration. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAnalysisPrepTest() throws ApiException {
        ProjectId projectId = null;
        AnalysisPrepResponse response = api.createAnalysisPrep(projectId);

        // TODO: test validations
    }
    
    /**
     * Delete Input
     *
     * Note that depending on the timing of the deletion, one of two different endpoints should be used. If an input file has just begun to upload, but that request has not completed and returned an inputId, use the \&quot;pending\&quot; URL (this requires the input upload request to have specified a X-Client-Request-Id header). If the inputId is known (this will be the case most of the time), use the URL that includes an input-id parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInputTest() throws ApiException {
        String prepId = null;
        String inputId = null;
        api.deleteInput(prepId, inputId);

        // TODO: test validations
    }
    
    /**
     * Delete Input (pending)
     *
     * Note that depending on the timing of the deletion, one of two different endpoints should be used. If an input file has just begun to upload, but that request has not completed and returned an inputId, use the \&quot;pending\&quot; URL (this requires the input upload request to have specified a X-Client-Request-Id header). If the inputId is known (this will be the case most of the time), use the URL that include an input-id parameter. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePendingInputTest() throws ApiException {
        String prepId = null;
        String xClientRequestId = null;
        api.deletePendingInput(prepId, xClientRequestId);

        // TODO: test validations
    }
    
    /**
     * Get All Analysis Details
     *
     * Obtain analysis details for a project, such as start and finish times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllAnalysisDetailsTest() throws ApiException {
        Integer projectId = null;
        List<AnalysisDetails> response = api.getAllAnalysisDetails(projectId);

        // TODO: test validations
    }
    
    /**
     * Get Analysis Details
     *
     * Obtain analysis details, such as start and finish times
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAnalysisDetailsTest() throws ApiException {
        Integer projectId = null;
        Integer analysisId = null;
        AnalysisDetails response = api.getAnalysisDetails(projectId, analysisId);

        // TODO: test validations
    }
    
    /**
     * Get Input Metadata
     *
     * Get metadata for a particular input associated with an Analysis Prep. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInputMetadataTest() throws ApiException {
        String prepId = null;
        String inputId = null;
        InputDisplayInfo response = api.getInputMetadata(prepId, inputId);

        // TODO: test validations
    }
    
    /**
     * Query Analysis Prep State
     *
     * Get a list of Input IDs and Verification Errors for an Analysis Prep. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void queryAnalysisPrepStateTest() throws ApiException {
        String prepId = null;
        AnalysisQueryResponse response = api.queryAnalysisPrepState(prepId);

        // TODO: test validations
    }
    
    /**
     * Run Prepared Analysis
     *
     * Once all of the verificationErrors in an Analysis Prep are addressed, an analysis can be started. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runPreparedAnalysisTest() throws ApiException {
        String prepId = null;
        Analysis response = api.runPreparedAnalysis(prepId);

        // TODO: test validations
    }
    
    /**
     * Name Analysis
     *
     * Set a name for a specific analysis
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setAnalysisNameTest() throws ApiException {
        Integer projectId = null;
        Integer analysisId = null;
        AnalysisName analysisName = null;
        api.setAnalysisName(projectId, analysisId, analysisName);

        // TODO: test validations
    }
    
    /**
     * Enable/Disable Display Tag
     *
     * Enable and disable individual display tags on individual prop inputs. Disabled tags will cause a file to be treated as if that tag were not there, for analysis purposes. For example, if the &#x60;{ \&quot;source\&quot;&amp;#58; \&quot;Java\&quot; } tag was disabled for a file when the analysis was started, that file would be treated as if there were no Java sources at all. This could mean that certain tools would not be run on that file. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setDisplayTagTest() throws ApiException {
        String prepId = null;
        String inputId = null;
        String tagId = null;
        Enabled enabled = null;
        InputDisplayInfo response = api.setDisplayTag(prepId, inputId, tagId, enabled);

        // TODO: test validations
    }
    
    /**
     * Upload File to Analysis Prep
     *
     * Analysis Preps should be populated by uploading files to Code Dx (or by configuring Git on a project, causing the source to be automatically added to the prep). 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String prepId = null;
        File file = null;
        String xClientRequestId = null;
        FileUploadResponse response = api.uploadFile(prepId, file, xClientRequestId);

        // TODO: test validations
    }
    
}
